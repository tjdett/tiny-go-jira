endpoint: https://ephocks.atlassian.net
authentication-method: api-token

queries:
  cloud-team: "resolution = unresolved and 'Assigned Team' = 23"
  mine: "resolution = unresolved and assignee=currentuser() ORDER BY created"

custom-commands:
  - name: global-summary
    help: summary of team tickets
    script: |-
      pattern="%20s: %5d\n"
      count_todo=$({{jira}} list --query "Status = 'To Do'" -t debug | jq '.total + 0')
      count_selected=$({{jira}} list --query "Status = 'Selected for Development'" -t debug | jq '.total + 0')
      count_inprogress=$({{jira}} list --query "Status = 'In Progress'" -t debug | jq '.total + 0')
      count_review=$({{jira}} list --query "Status = 'Review'" -t debug | jq '.total + 0')
      count_qa=$({{jira}} list --query "Status = 'QA'" -t debug | jq '.total + 0')
      count_rp=$({{jira}} list --query "Status = 'Release Pending'" -t debug | jq '.total + 0')
      count_blocked=$({{jira}} list --query "Status = 'Blocked'" -t debug | jq '.total + 0')
      printf "$pattern" "To Do" $count_todo
      printf "$pattern" "Selected for Dev" $count_selected
      printf "$pattern" "In Progress" $count_inprogress
      printf "$pattern" "Review" $count_review
      printf "$pattern" "QA" $count_qa
      printf "$pattern" "Release Pending" $count_rp
      printf "$pattern" "Blocked" $count_blocked
      echo "   -------------------------"
      printf "$pattern" "Total Pending" $((count_todo + count_selected))
      printf "$pattern" "Total Active" $((count_inprogress + count_review + count_qa))
      printf "$pattern" "Total Idle" $((count_rp + count_blocked))
  - name: mine
    help: display issues assigned to mine
    script: |-
      {{jira}} list --named-query mine
  - name: team-list
    help: list of team tickets
    args:
      - name: team
        required: true
    script: |-
      teamid=$(jq '.["{{ args.team }}" | ascii_downcase]' teams.json)
      {{jira}} list -t list-assigned --query "resolution = unresolved and 'Assigned Team' = $teamid and status != 'New' order by priority, key"
  - name: team-summary
    help: summary of team tickets
    args:
      - name: team
        required: true
    script: |-
      teamid=$(jq '.["{{ args.team }}" | ascii_downcase]' teams.json)
      pattern="%20s: %5d\n"
      count_todo=$({{jira}} list --query "'Assigned Team' = $teamid and Status = 'To Do'" -t debug | jq '.total + 0')
      count_selected=$({{jira}} list --query "'Assigned Team' = $teamid and Status = 'Selected for Development'" -t debug | jq '.total + 0')
      count_inprogress=$({{jira}} list --query "'Assigned Team' = $teamid and Status = 'In Progress'" -t debug | jq '.total + 0')
      count_review=$({{jira}} list --query "'Assigned Team' = $teamid and Status = 'Review'" -t debug | jq '.total + 0')
      count_qa=$({{jira}} list --query "'Assigned Team' = $teamid and Status = 'QA'" -t debug | jq '.total + 0')
      count_rp=$({{jira}} list --query "'Assigned Team' = $teamid and Status = 'Release Pending'" -t debug | jq '.total + 0')
      count_blocked=$({{jira}} list --query "'Assigned Team' = $teamid and Status = 'Blocked'" -t debug | jq '.total + 0')
      printf "$pattern" "To Do" $count_todo
      printf "$pattern" "Selected for Dev" $count_selected
      printf "$pattern" "In Progress" $count_inprogress
      printf "$pattern" "Review" $count_review
      printf "$pattern" "QA" $count_qa
      printf "$pattern" "Release Pending" $count_rp
      printf "$pattern" "Blocked" $count_blocked
      echo "   -------------------------"
      printf "$pattern" "Total Pending" $((count_todo + count_selected))
      printf "$pattern" "Total Active" $((count_inprogress + count_review + count_qa))
      printf "$pattern" "Total Idle" $((count_rp + count_blocked))
  - name: to-review
    help: move ticket to Review status
    args:
      - name: issue
        help: issue to transition
        required: true
    script: |-
      {{jira}} transition --noedit Review {{ args.issue }}
  - name: slack-msg
    help: generate slack message about ticket
    args:
      - name: action
        type: ENUM
        help: action on message
        required: true
        enum:
          - "took"
      - name: issue
        help: issue for message
        required: true
    script: |-
      emoji=$(jq -r '.["{{ args.action }}" | ascii_downcase]' emoji.json)
      printf "%s %s\n" "$emoji" "$({{jira}} view -t slack-oneline {{ args.issue }})"
  - name: users
    help: display users
    script: |-
      {{jira}} req /rest/api/2/user/assignable/search\?project=HELP\&username -t users